#!/bin/bash
##
## NAME:
## 	cbmf - showing off my bash script template
##
## SYNOPSIS:
## 	cbmf [options] [arguments]
##
## DESCRIPTION:
## 	This script is a template for bash scripts. It includes a help message
## 	and some useful functions.
##
## LAST REVISION: 2024-07-31

# long form of `set -eu`
set -o errexit # Exit on error
set -o nounset # Exit on using unset variable

# not POSIX compliant
# set -o pipefail  # Exit on error in pipe

# uncomment to print commands as they are executed
# set -x

# from micromamba installation script
PARENT=$(ps -o comm "$PPID" | tail -1) # detect the shell from which the script was called
PARENT=${PARENT#-}                     # remove the leading dash that login shells have

# if parent is supported, define helper functions
pr_info()
{
	case "$PARENT" in
	bash | zsh) printf "\e[1;34m[INFO] %s\e[0m\n" "$1" ;;
	*) printf "[INFO] %s\n" "$1" ;;
	esac
}

pr_error()
{
	case "$PARENT" in
	bash | zsh) printf "\e[1;31m[ERROR] %s\e[0m\n" "$1" ;;
	*) printf "[ERROR] %s\n" "$1" ;;
	esac
}

bail()
{
	pr_error "$1"
	exit 1
}

shell=${SHELL##*/} # remove the path and keep only the shell name
# basename also works, but there are conflicting
# versions of basename (and dirname): GNU and POSIX
case "$PARENT" in
sh | bash | zsh)
	pr_info "Detected shell: ${shell}"
	;;
*)
	# pr_error "Unsupported shell: ${shell}"
	printf "Unsupported shell: %s\n" "$PARENT"
	;;
esac

# in POSIX sh, `source` in place of `.` is more undefined
# source lib/utils.sh

# set up global variables
# declare and assign separately to avoid masking retvals
SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# export SCRIPTS_DIR

_help()
{
	cat << EOF
Usage: cbmf [options]

Options:
  -h  Print this help message
EOF
}

# use rsync to keep this folder in sync with a remote machine
REMOTE_ALIAS="my-ec2"

_sync()
{

	if [[ $(uname) == "Darwin" ]]; then
		# assume were on the host if we're on a mac
		# XXX: this is not a good assumption
		rsync -avz --delete "$SCRIPTS_DIR"/ "${REMOTE_ALIAS}:~/scripts/"

		# check out https://stackoverflow.com/a/662032

		# DO NOT delete files on the remote that are not on the local
		# (i.e. only copy files from the remote that are not on the local)
		# rsync -avz "${REMOTE_ALIAS}:~/out/" "$LOCAL_DATA_IN"/
	else
		# change behavior if this script is run on the remote

		# add the scripts directory to the PATH if it's not already there
		if (grep -q "export PATH=\$PATH:~/scripts" ~/.bashrc); then
			echo "export PATH=\$PATH:~/scripts" >> ~/.bashrc
		fi

	fi
}

# if there are more than 0 arguments, check the first one against (sync, init, and align
if [ $# -gt 0 ]; then
	case $1 in
	help) _help ;;
	sync) _sync ;;
	init) _init ;;
	align) pr_info "aligning" ;;
	*)
		pr_error "Invalid argument: $1"
		_help
		exit 1
		;;
	esac
fi

# # Get options
# while getopts "h" opt; do
#   case $opt in
#     h)
#     \?) bail "Invalid option: -$OPTARG" ;;
#   esac
# done
